/* -Script custom by AYATSUKi Yuuki w/JavaScript GPT- */
//(function () {
window.AppConfig = {// 設定：本番時に configVersion 設定
	configVersion: '250616.002',
	useCacheBuster: true// true: 開発時、false: 本番運用
};

// ↓以下は基本触らない。conf.json のパス・名称変更の時だけ修正
function loadHtmlIntoElement(targetSelector, url) {
	const targetElements = document.querySelectorAll(targetSelector);
	if (!targetElements.length) return;

	fetch(url)
		.then(response => {
			if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
			return response.text();
		})
		.then(html => {
			targetElements.forEach(targetElement => {
				targetElement.innerHTML = html;
			});
		})
		.catch(error => console.error(`Error loading ${url}`, error));
}

document.addEventListener('DOMContentLoaded', () => {
	const cacheParam = window.AppConfig.useCacheBuster ?
		`?_=${Date.now()}` :
		`?v=${window.AppConfig.configVersion}`;

	fetch(`/js/incl/conf.json${cacheParam}`)
		.then(response => response.json())
		.then(configList => {
			const currentPath = window.location.pathname;
			const config = configList.find(cfg => {
				if (cfg.path === currentPath) return true;
				if (cfg.path === '/' && (currentPath === '/' || currentPath === '/index.html')) return true;
				return false;
			});

			if (config) {
				config.targets.forEach(({
					selector,
					url
				}) => {
					loadHtmlIntoElement(selector, url);
				});
			}
		})
		.catch(error => console.error('Config load failed', error));
});
//})();